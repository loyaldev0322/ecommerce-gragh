diff --git a/node_modules/@changesets/config/dist/config.cjs.dev.js b/node_modules/@changesets/config/dist/config.cjs.dev.js
index 446250a..a037d69 100644
--- a/node_modules/@changesets/config/dist/config.cjs.dev.js
+++ b/node_modules/@changesets/config/dist/config.cjs.dev.js
@@ -51,6 +51,9 @@ let defaultWrittenConfig = {
   access: "restricted",
   baseBranch: "master",
   updateInternalDependencies: "patch",
+  autoBumpPeerDependentsStrategy: "major",
+  autoBumpPeerDependentsInSameChangeset: true,
+  autoBumpPeerDependentsCondition: "always",
   ignore: []
 };
 
@@ -107,7 +110,7 @@ let read = async (cwd, packages) => {
   return parse(json, packages);
 };
 let parse = (json, packages) => {
-  var _json$changedFilePatt, _json$snapshot$prerel, _json$snapshot, _json$snapshot2, _json$___experimental, _json$___experimental2, _json$___experimental3, _json$___experimental4, _json$privatePackages, _json$privatePackages2;
+  var _json$changedFilePatt, _json$___experimental, _json$___experimental2, _json$snapshot$prerel, _json$snapshot, _json$snapshot2, _json$___experimental3, _json$___experimental4, _json$___experimental5, _json$___experimental6, _json$privatePackages, _json$privatePackages2;
 
   let messages = [];
   let pkgNames = packages.packages.map(({
@@ -215,6 +218,18 @@ let parse = (json, packages) => {
     messages.push(`The \`updateInternalDependencies\` option is set as ${JSON.stringify(json.updateInternalDependencies, null, 2)} but can only be 'patch' or 'minor'`);
   }
 
+  if (json.autoBumpPeerDependentsInSameChangeset !== undefined && typeof json.autoBumpPeerDependentsInSameChangeset !== "boolean") {
+    messages.push(`The \`autoBumpPeerDependentsInSameChangeset\` option is set as ${JSON.stringify(json.autoBumpPeerDependentsInSameChangeset, null, 2)} but can only be a boolean`);
+  }
+
+  if (json.autoBumpPeerDependentsCondition !== undefined && !["always", "out-of-range"].includes(json.autoBumpPeerDependentsCondition)) {
+    messages.push(`The \`autoBumpPeerDependentsCondition\` option is set as ${JSON.stringify(json.autoBumpPeerDependentsCondition, null, 2)} but can only be 'always' or 'out-of-range'`);
+  }
+
+  if (json.autoBumpPeerDependentsStrategy !== undefined && !["major", "follow"].includes(json.autoBumpPeerDependentsStrategy)) {
+    messages.push(`The \`autoBUmpPeerDependentsStrategy\` option is set as ${JSON.stringify(json.autoBumpPeerDependentsStrategy, null, 2)} but can only be 'major' or 'follow'`);
+  }
+
   if (json.ignore) {
     if (!(isArray(json.ignore) && json.ignore.every(pkgName => typeof pkgName === "string"))) {
       messages.push(`The \`ignore\` option is set as ${JSON.stringify(json.ignore, null, 2)} when the only valid values are undefined or an array of package names`);
@@ -286,15 +301,18 @@ let parse = (json, packages) => {
     baseBranch: json.baseBranch === undefined ? defaultWrittenConfig.baseBranch : json.baseBranch,
     changedFilePatterns: (_json$changedFilePatt = json.changedFilePatterns) !== null && _json$changedFilePatt !== void 0 ? _json$changedFilePatt : ["**"],
     updateInternalDependencies: json.updateInternalDependencies === undefined ? defaultWrittenConfig.updateInternalDependencies : json.updateInternalDependencies,
+    autoBumpPeerDependentsInSameChangeset: json.autoBumpPeerDependentsInSameChangeset === undefined ? defaultWrittenConfig.autoBumpPeerDependentsInSameChangeset : json.autoBumpPeerDependentsInSameChangeset,
+    autoBumpPeerDependentsCondition: json.autoBumpPeerDependentsCondition === undefined ? ((_json$___experimental = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental === void 0 ? void 0 : _json$___experimental.onlyUpdatePeerDependentsWhenOutOfRange) === undefined ? defaultWrittenConfig.autoBumpPeerDependentsCondition : (_json$___experimental2 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) !== null && _json$___experimental2 !== void 0 && _json$___experimental2.onlyUpdatePeerDependentsWhenOutOfRange ? "out-of-range" : "always" : json.autoBumpPeerDependentsCondition,
+    autoBumpPeerDependentsStrategy: json.autoBumpPeerDependentsStrategy === undefined ? defaultWrittenConfig.autoBumpPeerDependentsStrategy : json.autoBumpPeerDependentsStrategy,
     ignore: json.ignore === undefined ? defaultWrittenConfig.ignore : micromatch__default['default'](pkgNames, json.ignore),
     bumpVersionsWithWorkspaceProtocolOnly: json.bumpVersionsWithWorkspaceProtocolOnly === true,
     snapshot: {
       prereleaseTemplate: (_json$snapshot$prerel = (_json$snapshot = json.snapshot) === null || _json$snapshot === void 0 ? void 0 : _json$snapshot.prereleaseTemplate) !== null && _json$snapshot$prerel !== void 0 ? _json$snapshot$prerel : null,
-      useCalculatedVersion: ((_json$snapshot2 = json.snapshot) === null || _json$snapshot2 === void 0 ? void 0 : _json$snapshot2.useCalculatedVersion) !== undefined ? json.snapshot.useCalculatedVersion : ((_json$___experimental = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental === void 0 ? void 0 : _json$___experimental.useCalculatedVersionForSnapshots) !== undefined ? (_json$___experimental2 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental2 === void 0 ? void 0 : _json$___experimental2.useCalculatedVersionForSnapshots : false
+      useCalculatedVersion: ((_json$snapshot2 = json.snapshot) === null || _json$snapshot2 === void 0 ? void 0 : _json$snapshot2.useCalculatedVersion) !== undefined ? json.snapshot.useCalculatedVersion : ((_json$___experimental3 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental3 === void 0 ? void 0 : _json$___experimental3.useCalculatedVersionForSnapshots) !== undefined ? (_json$___experimental4 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental4 === void 0 ? void 0 : _json$___experimental4.useCalculatedVersionForSnapshots : false
     },
     ___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH: {
       onlyUpdatePeerDependentsWhenOutOfRange: json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH === undefined || json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange === undefined ? false : json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange,
-      updateInternalDependents: (_json$___experimental3 = (_json$___experimental4 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental4 === void 0 ? void 0 : _json$___experimental4.updateInternalDependents) !== null && _json$___experimental3 !== void 0 ? _json$___experimental3 : "out-of-range"
+      updateInternalDependents: (_json$___experimental5 = (_json$___experimental6 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental6 === void 0 ? void 0 : _json$___experimental6.updateInternalDependents) !== null && _json$___experimental5 !== void 0 ? _json$___experimental5 : "out-of-range"
     },
     // TODO consider enabling this by default in the next major version
     privatePackages: json.privatePackages === false ? {
diff --git a/node_modules/@changesets/config/dist/config.cjs.prod.js b/node_modules/@changesets/config/dist/config.cjs.prod.js
index fcb57a2..0643034 100644
--- a/node_modules/@changesets/config/dist/config.cjs.prod.js
+++ b/node_modules/@changesets/config/dist/config.cjs.prod.js
@@ -46,6 +46,9 @@ let defaultWrittenConfig = {
   access: "restricted",
   baseBranch: "master",
   updateInternalDependencies: "patch",
+  autoBumpPeerDependentsStrategy: "major",
+  autoBumpPeerDependentsInSameChangeset: !0,
+  autoBumpPeerDependentsCondition: "always",
   ignore: []
 };
 
@@ -77,7 +80,7 @@ let read = async (cwd, packages) => {
   let json = await fs.readJSON(path__default.default.join(cwd, ".changeset", "config.json"));
   return parse(json, packages);
 }, parse = (json, packages) => {
-  var _json$changedFilePatt, _json$snapshot$prerel, _json$snapshot, _json$snapshot2, _json$___experimental, _json$___experimental2, _json$___experimental3, _json$___experimental4, _json$privatePackages, _json$privatePackages2;
+  var _json$changedFilePatt, _json$___experimental, _json$___experimental2, _json$snapshot$prerel, _json$snapshot, _json$snapshot2, _json$___experimental3, _json$___experimental4, _json$___experimental5, _json$___experimental6, _json$privatePackages, _json$privatePackages2;
   let messages = [], pkgNames = packages.packages.map((({packageJson: packageJson}) => packageJson.name));
   void 0 === json.changelog || !1 === json.changelog || "string" == typeof json.changelog || isArray(json.changelog) && 2 === json.changelog.length && "string" == typeof json.changelog[0] || messages.push(`The \`changelog\` option is set as ${JSON.stringify(json.changelog, null, 2)} when the only valid values are undefined, false, a module path(e.g. "@changesets/cli/changelog" or "./some-module") or a tuple with a module path and config for the changelog generator(e.g. ["@changesets/cli/changelog", { someOption: true }])`);
   let normalizedAccess = json.access;
@@ -118,6 +121,9 @@ let read = async (cwd, packages) => {
   if (allFixedPackages.forEach((pkgName => {
     allLinkedPackages.has(pkgName) && messages.push(`The package "${pkgName}" can be found in both fixed and linked groups. A package can only be either fixed or linked.`);
   })), void 0 === json.updateInternalDependencies || [ "patch", "minor" ].includes(json.updateInternalDependencies) || messages.push(`The \`updateInternalDependencies\` option is set as ${JSON.stringify(json.updateInternalDependencies, null, 2)} but can only be 'patch' or 'minor'`), 
+  void 0 !== json.autoBumpPeerDependentsInSameChangeset && "boolean" != typeof json.autoBumpPeerDependentsInSameChangeset && messages.push(`The \`autoBumpPeerDependentsInSameChangeset\` option is set as ${JSON.stringify(json.autoBumpPeerDependentsInSameChangeset, null, 2)} but can only be a boolean`), 
+  void 0 === json.autoBumpPeerDependentsCondition || [ "always", "out-of-range" ].includes(json.autoBumpPeerDependentsCondition) || messages.push(`The \`autoBumpPeerDependentsCondition\` option is set as ${JSON.stringify(json.autoBumpPeerDependentsCondition, null, 2)} but can only be 'always' or 'out-of-range'`), 
+  void 0 === json.autoBumpPeerDependentsStrategy || [ "major", "follow" ].includes(json.autoBumpPeerDependentsStrategy) || messages.push(`The \`autoBUmpPeerDependentsStrategy\` option is set as ${JSON.stringify(json.autoBumpPeerDependentsStrategy, null, 2)} but can only be 'major' or 'follow'`), 
   json.ignore) if (isArray(json.ignore) && json.ignore.every((pkgName => "string" == typeof pkgName))) {
     messages.push(...getUnmatchedPatterns(json.ignore, pkgNames).map((pkgOrGlob => `The package or glob expression "${pkgOrGlob}" is specified in the \`ignore\` option but it is not found in the project. You may have misspelled the package name or provided an invalid glob expression. Note that glob expressions must be defined according to https://www.npmjs.com/package/micromatch.`)));
     const dependentsGraph = getDependentsGraph.getDependentsGraph(packages);
@@ -146,15 +152,18 @@ let read = async (cwd, packages) => {
     baseBranch: void 0 === json.baseBranch ? defaultWrittenConfig.baseBranch : json.baseBranch,
     changedFilePatterns: null !== (_json$changedFilePatt = json.changedFilePatterns) && void 0 !== _json$changedFilePatt ? _json$changedFilePatt : [ "**" ],
     updateInternalDependencies: void 0 === json.updateInternalDependencies ? defaultWrittenConfig.updateInternalDependencies : json.updateInternalDependencies,
+    autoBumpPeerDependentsInSameChangeset: void 0 === json.autoBumpPeerDependentsInSameChangeset ? defaultWrittenConfig.autoBumpPeerDependentsInSameChangeset : json.autoBumpPeerDependentsInSameChangeset,
+    autoBumpPeerDependentsCondition: void 0 === json.autoBumpPeerDependentsCondition ? void 0 === (null === (_json$___experimental = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) || void 0 === _json$___experimental ? void 0 : _json$___experimental.onlyUpdatePeerDependentsWhenOutOfRange) ? defaultWrittenConfig.autoBumpPeerDependentsCondition : null !== (_json$___experimental2 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) && void 0 !== _json$___experimental2 && _json$___experimental2.onlyUpdatePeerDependentsWhenOutOfRange ? "out-of-range" : "always" : json.autoBumpPeerDependentsCondition,
+    autoBumpPeerDependentsStrategy: void 0 === json.autoBumpPeerDependentsStrategy ? defaultWrittenConfig.autoBumpPeerDependentsStrategy : json.autoBumpPeerDependentsStrategy,
     ignore: void 0 === json.ignore ? defaultWrittenConfig.ignore : micromatch__default.default(pkgNames, json.ignore),
     bumpVersionsWithWorkspaceProtocolOnly: !0 === json.bumpVersionsWithWorkspaceProtocolOnly,
     snapshot: {
       prereleaseTemplate: null !== (_json$snapshot$prerel = null === (_json$snapshot = json.snapshot) || void 0 === _json$snapshot ? void 0 : _json$snapshot.prereleaseTemplate) && void 0 !== _json$snapshot$prerel ? _json$snapshot$prerel : null,
-      useCalculatedVersion: void 0 !== (null === (_json$snapshot2 = json.snapshot) || void 0 === _json$snapshot2 ? void 0 : _json$snapshot2.useCalculatedVersion) ? json.snapshot.useCalculatedVersion : void 0 !== (null === (_json$___experimental = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) || void 0 === _json$___experimental ? void 0 : _json$___experimental.useCalculatedVersionForSnapshots) && (null === (_json$___experimental2 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) || void 0 === _json$___experimental2 ? void 0 : _json$___experimental2.useCalculatedVersionForSnapshots)
+      useCalculatedVersion: void 0 !== (null === (_json$snapshot2 = json.snapshot) || void 0 === _json$snapshot2 ? void 0 : _json$snapshot2.useCalculatedVersion) ? json.snapshot.useCalculatedVersion : void 0 !== (null === (_json$___experimental3 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) || void 0 === _json$___experimental3 ? void 0 : _json$___experimental3.useCalculatedVersionForSnapshots) && (null === (_json$___experimental4 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) || void 0 === _json$___experimental4 ? void 0 : _json$___experimental4.useCalculatedVersionForSnapshots)
     },
     ___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH: {
       onlyUpdatePeerDependentsWhenOutOfRange: void 0 !== json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH && void 0 !== json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange && json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange,
-      updateInternalDependents: null !== (_json$___experimental3 = null === (_json$___experimental4 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) || void 0 === _json$___experimental4 ? void 0 : _json$___experimental4.updateInternalDependents) && void 0 !== _json$___experimental3 ? _json$___experimental3 : "out-of-range"
+      updateInternalDependents: null !== (_json$___experimental5 = null === (_json$___experimental6 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) || void 0 === _json$___experimental6 ? void 0 : _json$___experimental6.updateInternalDependents) && void 0 !== _json$___experimental5 ? _json$___experimental5 : "out-of-range"
     },
     privatePackages: !1 === json.privatePackages ? {
       tag: !1,
diff --git a/node_modules/@changesets/config/dist/config.esm.js b/node_modules/@changesets/config/dist/config.esm.js
index 2552efa..51d2fe5 100644
--- a/node_modules/@changesets/config/dist/config.esm.js
+++ b/node_modules/@changesets/config/dist/config.esm.js
@@ -42,6 +42,9 @@ let defaultWrittenConfig = {
   access: "restricted",
   baseBranch: "master",
   updateInternalDependencies: "patch",
+  autoBumpPeerDependentsStrategy: "major",
+  autoBumpPeerDependentsInSameChangeset: true,
+  autoBumpPeerDependentsCondition: "always",
   ignore: []
 };
 
@@ -98,7 +101,7 @@ let read = async (cwd, packages) => {
   return parse(json, packages);
 };
 let parse = (json, packages) => {
-  var _json$changedFilePatt, _json$snapshot$prerel, _json$snapshot, _json$snapshot2, _json$___experimental, _json$___experimental2, _json$___experimental3, _json$___experimental4, _json$privatePackages, _json$privatePackages2;
+  var _json$changedFilePatt, _json$___experimental, _json$___experimental2, _json$snapshot$prerel, _json$snapshot, _json$snapshot2, _json$___experimental3, _json$___experimental4, _json$___experimental5, _json$___experimental6, _json$privatePackages, _json$privatePackages2;
 
   let messages = [];
   let pkgNames = packages.packages.map(({
@@ -206,6 +209,18 @@ let parse = (json, packages) => {
     messages.push(`The \`updateInternalDependencies\` option is set as ${JSON.stringify(json.updateInternalDependencies, null, 2)} but can only be 'patch' or 'minor'`);
   }
 
+  if (json.autoBumpPeerDependentsInSameChangeset !== undefined && typeof json.autoBumpPeerDependentsInSameChangeset !== "boolean") {
+    messages.push(`The \`autoBumpPeerDependentsInSameChangeset\` option is set as ${JSON.stringify(json.autoBumpPeerDependentsInSameChangeset, null, 2)} but can only be a boolean`);
+  }
+
+  if (json.autoBumpPeerDependentsCondition !== undefined && !["always", "out-of-range"].includes(json.autoBumpPeerDependentsCondition)) {
+    messages.push(`The \`autoBumpPeerDependentsCondition\` option is set as ${JSON.stringify(json.autoBumpPeerDependentsCondition, null, 2)} but can only be 'always' or 'out-of-range'`);
+  }
+
+  if (json.autoBumpPeerDependentsStrategy !== undefined && !["major", "follow"].includes(json.autoBumpPeerDependentsStrategy)) {
+    messages.push(`The \`autoBUmpPeerDependentsStrategy\` option is set as ${JSON.stringify(json.autoBumpPeerDependentsStrategy, null, 2)} but can only be 'major' or 'follow'`);
+  }
+
   if (json.ignore) {
     if (!(isArray(json.ignore) && json.ignore.every(pkgName => typeof pkgName === "string"))) {
       messages.push(`The \`ignore\` option is set as ${JSON.stringify(json.ignore, null, 2)} when the only valid values are undefined or an array of package names`);
@@ -277,15 +292,18 @@ let parse = (json, packages) => {
     baseBranch: json.baseBranch === undefined ? defaultWrittenConfig.baseBranch : json.baseBranch,
     changedFilePatterns: (_json$changedFilePatt = json.changedFilePatterns) !== null && _json$changedFilePatt !== void 0 ? _json$changedFilePatt : ["**"],
     updateInternalDependencies: json.updateInternalDependencies === undefined ? defaultWrittenConfig.updateInternalDependencies : json.updateInternalDependencies,
+    autoBumpPeerDependentsInSameChangeset: json.autoBumpPeerDependentsInSameChangeset === undefined ? defaultWrittenConfig.autoBumpPeerDependentsInSameChangeset : json.autoBumpPeerDependentsInSameChangeset,
+    autoBumpPeerDependentsCondition: json.autoBumpPeerDependentsCondition === undefined ? ((_json$___experimental = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental === void 0 ? void 0 : _json$___experimental.onlyUpdatePeerDependentsWhenOutOfRange) === undefined ? defaultWrittenConfig.autoBumpPeerDependentsCondition : (_json$___experimental2 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) !== null && _json$___experimental2 !== void 0 && _json$___experimental2.onlyUpdatePeerDependentsWhenOutOfRange ? "out-of-range" : "always" : json.autoBumpPeerDependentsCondition,
+    autoBumpPeerDependentsStrategy: json.autoBumpPeerDependentsStrategy === undefined ? defaultWrittenConfig.autoBumpPeerDependentsStrategy : json.autoBumpPeerDependentsStrategy,
     ignore: json.ignore === undefined ? defaultWrittenConfig.ignore : micromatch(pkgNames, json.ignore),
     bumpVersionsWithWorkspaceProtocolOnly: json.bumpVersionsWithWorkspaceProtocolOnly === true,
     snapshot: {
       prereleaseTemplate: (_json$snapshot$prerel = (_json$snapshot = json.snapshot) === null || _json$snapshot === void 0 ? void 0 : _json$snapshot.prereleaseTemplate) !== null && _json$snapshot$prerel !== void 0 ? _json$snapshot$prerel : null,
-      useCalculatedVersion: ((_json$snapshot2 = json.snapshot) === null || _json$snapshot2 === void 0 ? void 0 : _json$snapshot2.useCalculatedVersion) !== undefined ? json.snapshot.useCalculatedVersion : ((_json$___experimental = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental === void 0 ? void 0 : _json$___experimental.useCalculatedVersionForSnapshots) !== undefined ? (_json$___experimental2 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental2 === void 0 ? void 0 : _json$___experimental2.useCalculatedVersionForSnapshots : false
+      useCalculatedVersion: ((_json$snapshot2 = json.snapshot) === null || _json$snapshot2 === void 0 ? void 0 : _json$snapshot2.useCalculatedVersion) !== undefined ? json.snapshot.useCalculatedVersion : ((_json$___experimental3 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental3 === void 0 ? void 0 : _json$___experimental3.useCalculatedVersionForSnapshots) !== undefined ? (_json$___experimental4 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental4 === void 0 ? void 0 : _json$___experimental4.useCalculatedVersionForSnapshots : false
     },
     ___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH: {
       onlyUpdatePeerDependentsWhenOutOfRange: json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH === undefined || json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange === undefined ? false : json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange,
-      updateInternalDependents: (_json$___experimental3 = (_json$___experimental4 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental4 === void 0 ? void 0 : _json$___experimental4.updateInternalDependents) !== null && _json$___experimental3 !== void 0 ? _json$___experimental3 : "out-of-range"
+      updateInternalDependents: (_json$___experimental5 = (_json$___experimental6 = json.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH) === null || _json$___experimental6 === void 0 ? void 0 : _json$___experimental6.updateInternalDependents) !== null && _json$___experimental5 !== void 0 ? _json$___experimental5 : "out-of-range"
     },
     // TODO consider enabling this by default in the next major version
     privatePackages: json.privatePackages === false ? {
diff --git a/node_modules/@changesets/config/dist/declarations/src/index.d.ts b/node_modules/@changesets/config/dist/declarations/src/index.d.ts
index 5e7d7d9..535c5fb 100644
--- a/node_modules/@changesets/config/dist/declarations/src/index.d.ts
+++ b/node_modules/@changesets/config/dist/declarations/src/index.d.ts
@@ -9,6 +9,9 @@ export declare let defaultWrittenConfig: {
     readonly access: "restricted";
     readonly baseBranch: "master";
     readonly updateInternalDependencies: "patch";
+    readonly autoBumpPeerDependentsStrategy: "major";
+    readonly autoBumpPeerDependentsInSameChangeset: true;
+    readonly autoBumpPeerDependentsCondition: "always";
     readonly ignore: readonly string[];
 };
 export declare let read: (cwd: string, packages: Packages) => Promise<Config>;
